$transition-duration: getTextFieldSizes(label-transition);

@mixin generate-text-input-styles {
  .Explanation {
    display: block;
    margin-top: getTextFieldSizes(explanation-margin);

    @include theme(color, default-input-color);
  }

  .TextInputWrapper {
    position: relative;
    display: inline-block;

    width: 100%;
    max-width: getTextFieldSizes(input-width);

    padding-top: getTextFieldSizes(input-label-offset);
    font-size: getTextFieldSizes(input-font-size);

    overflow: hidden;
  }

  // Input
  .TextInputBaseInput {
    width: 100%;

    @include theme(border, default-input-color, solid getTextFieldSizes(input-border-width));

    &:hover {
      border-width: getTextFieldSizes(input-hover-border-width);
    }

    &:disabled {
      opacity: getTextFieldSizes(input-disabled);
    }

    // Sizes
    border-radius: getTextFieldSizes(input-border-radius);
    padding: 0 getTextFieldSizes(input-type-offset);
    min-height: getTextFieldSizes(input-min-height);

    // Reset
    background-color: transparent;
    box-sizing: border-box;
    font-size: inherit;
    line-height: inherit;
    margin: 0;
    border-top-color: transparent;
    height: inherit;
    box-shadow: none;
    font-family: inherit;

    // Animation
    transition: border $transition-duration, box-shadow $transition-duration;

    &:not(:focus):not(.TextInputBaseInput--filled) {
      @include theme(border-top-color, default-input-color);

      + .TextInputPlaceholder {
        line-height: getTextFieldSizes(input-label-line-height);

        &::before,
        &::after {
          border-top-color: transparent;
        }
      }
    }

    &--with-label {
      &:focus,
      &.TextInputBaseInput--filled {
        border-top-color: transparent !important;
      }
    }

    &:focus,
    &--filled {
      @include theme(border-color, primary);

      box-shadow: inset 1px 0 inherit, inset -1px 0 inherit, inset 0 -1px inherit;
      outline: none;

      + .TextInputPlaceholder {
        @include theme(color, primary);

        font-size: getTextFieldSizes(input-label-focused-font-size);

        &::before,
        &::after {
          @include theme(border-top-color, primary);
        }
      }
    }
  }

  // Label
  .TextInputPlaceholder {
    position: absolute;
    top: 0;
    left: 0;
    display: flex;
    @include theme(border-color, primary);
    width: 100%;
    max-height: 100%;
    @include theme(color, default-input-color);
    font-size: getTextFieldSizes(font-size);
    line-height: getTextFieldSizes(input-label-focused-line-height);
    cursor: text;
    transition: text-indent $transition-duration, color $transition-duration, font-size $transition-duration,
      line-height $transition-duration;
    height: 0.4rem;

    &::before,
    &::after {
      content: '';
      display: block;
      box-sizing: border-box;
      margin-top: getTextFieldSizes(input-label-offset);
      border-top: solid 1px;

      @include theme(border-top-color, primary);

      min-width: getTextFieldSizes(input-corner-min-width);
      height: calc(getTextFieldSizes(input-label-offset) + 0.2rem);
      pointer-events: none;
      transition: border-color $transition-duration, box-shadow $transition-duration;
      box-shadow: inset 0 1px transparent;
    }

    &::before {
      margin-right: getTextFieldSizes(input-corner-offset);
      border-left: solid 0.1rem transparent;
      border-radius: getTextFieldSizes(input-border-radius) 0;
    }

    &::after {
      flex-grow: 1;
      margin-left: getTextFieldSizes(input-corner-offset);
      border-right: solid 0.1rem transparent;
      border-radius: 0 getTextFieldSizes(input-border-radius);
    }
  }

  // Icons

  .StartIcon,
  .EndIcon {
    position: absolute;
    top: getTextFieldSizes(icon-margin);
    width: 2.4rem;
    height: 2.4rem;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .StartIcon {
    left: getTextFieldSizes(icon-margin);
  }

  .EndIcon {
    right: getTextFieldSizes(icon-margin-right);
  }

  .TextInputContainer {
    &--full-width .TextInputWrapper {
      max-width: initial;
    }

    &--disabled {
      opacity: getTextFieldSizes(disabled-opacity);
    }

    &--withRightIcon {
      .TextInputBaseInput {
        padding-right: getTextFieldSizes(input-type-offset--with-icons);
      }
    }

    &--withLeftIcon {
      .TextInputBaseInput {
        padding-left: getTextFieldSizes(input-type-offset--with-icons);
      }

      .TextInputPlaceholder {
        text-indent: getTextFieldSizes(input-label-offset--with-icons);
      }

      .TextInputBaseInput {
        &:focus,
        &--filled {
          + .TextInputPlaceholder {
            text-indent: 0;
          }
        }
      }
    }
  }

  // Color mapping

  .TextInputContainer {
    @each $state in $input-states {
      &--#{$state} {
        .Explanation {
          @include theme(color, input-color--#{$state});
        }

        .TextInputPlaceholder {
          @include theme(border-color, input-focused-color--#{$state});
          @include theme(color, input-color--#{$state});

          &::before,
          &::after {
            @include theme(border-top-color, input-focused-color--#{$state});
          }
        }

        .TextInputBaseInput {
          @include theme(color, input-focused-color--#{$state});

          @include theme(border, input-color--#{$state}, solid 0.1rem);

          &:not(:focus) {
            @include theme(border-top-color, input-color--#{$state});
          }

          &:focus {
            @include theme(border-color, input-focused-color--#{$state});

            + .TextInputPlaceholder {
              @include theme(color, input-focused-color--#{$state});

              &::before,
              &::after {
                @include theme(border-top-color, input-focused-color--#{$state});
              }
            }
          }
        }
      }
    }
  }

  // /* Disabled */
  // .TextInputWrapper > input:disabled,
  // .TextInputWrapper > input:disabled + span,
  // .TextInputWrapper > textarea:disabled,
  // .TextInputWrapper > textarea:disabled + span {
  //   border-color: rgba(var(--pure-material-onsurface-rgb, 0, 0, 0), 0.38) !important;
  //   border-top-color: transparent !important;
  //   color: rgba(var(--pure-material-onsurface-rgb, 0, 0, 0), 0.38);
  //   pointer-events: none;
  // }

  // .TextInputWrapper > input:disabled + span::before,
  // .TextInputWrapper > input:disabled + span::after,
  // .TextInputWrapper > textarea:disabled + span::before,
  // .TextInputWrapper > textarea:disabled + span::after {
  //   border-top-color: rgba(var(--pure-material-onsurface-rgb, 0, 0, 0), 0.38) !important;
  // }

  // .TextInputWrapper > input:disabled:placeholder-shown,
  // .TextInputWrapper > input:disabled:placeholder-shown + span,
  // .TextInputWrapper > textarea:disabled:placeholder-shown,
  // .TextInputWrapper > textarea:disabled:placeholder-shown + span {
  //   border-top-color: rgba(var(--pure-material-onsurface-rgb, 0, 0, 0), 0.38) !important;
  // }

  // .TextInputWrapper > input:disabled:placeholder-shown + span::before,
  // .TextInputWrapper > input:disabled:placeholder-shown + span::after,
  // .TextInputWrapper > textarea:disabled:placeholder-shown + span::before,
  // .TextInputWrapper > textarea:disabled:placeholder-shown + span::after {
  //   border-top-color: transparent !important;
  // }
}
