$transition-duration: getTextFieldSizes(label-transition);

@mixin generate-text-input-styles {
  .Explanation {
    display: block;
    margin: getTextFieldSizes(explanation-margin) 0;
    @include theme(color, default-input-color);
  }

  .TextInputWrapper {
    position: relative;
    display: inline-block;
    width: 100%;
    max-width: getTextFieldSizes(input-width);
    padding-top: getTextFieldSizes(input-label-offset);
    font-size: getTextFieldSizes(input-font-size);
    overflow: hidden;
  }

  // Input
  .TextInputBaseInput {
    width: 100%;

    @include theme(border, default-input-color, solid getTextFieldSizes(input-border-width));

    &:hover {
      border-width: getTextFieldSizes(input-hover-border-width);
    }

    &:disabled {
      opacity: getTextFieldSizes(input-disabled);
    }
    &:focus {
      @include theme(border-color, input-color-focus-default);
    }

    // Sizes
    border-radius: getTextFieldSizes(input-border-radius);
    padding: 0 getTextFieldSizes(input-type-offset);
    min-height: getTextFieldSizes(input-min-height);

    // Reset
    background-color: transparent;
    box-sizing: border-box;
    font-size: inherit;
    line-height: inherit;
    margin: 0;
    border-top-color: transparent;
    height: inherit;
    box-shadow: none;
    font-family: inherit;

    // Animation
    transition: border $transition-duration, box-shadow $transition-duration;

    &:not(:focus):not(.TextInputBaseInput--filled) {
      @include theme(border-top-color, default-input-color);

      + .TextInputLabelContainer {
        line-height: getTextFieldSizes(input-label-line-height);

        &::before,
        &::after {
          border-top-color: transparent;
        }
      }
    }

    &--with-label {
      &:focus,
      &.TextInputBaseInput--filled {
        border-top-color: transparent !important;
      }
    }

    &:focus,
    &--filled {
      @include theme(color, primary);

      box-shadow: inset 1px 0 inherit, inset -1px 0 inherit, inset 0 -1px inherit;
      outline: none;

      + .TextInputLabelContainer {
        @include theme(color, primary);

        font-size: getTextFieldSizes(input-label-focused-font-size);

        &::before,
        &::after {
          @include theme(border-top-color, primary);
        }
      }
    }
  }

  // Label
  .TextInputLabelContainer {
    position: absolute;
    top: 0;
    @include flex;
    @include theme(border-color, primary);
    width: 100%;
    max-height: 100%;
    @include theme(color, default-input-color);
    font-size: getTextFieldSizes(input-font-size);
    line-height: getTextFieldSizes(input-label-focused-line-height);
    cursor: text;
    transition: text-indent $transition-duration, color $transition-duration, font-size $transition-duration,
      line-height $transition-duration;
    height: getTextFieldSizes(input-label-height);

    &::before,
    &::after {
      content: '';
      display: block;
      box-sizing: border-box;
      margin-top: getTextFieldSizes(input-label-offset);
      border-top: solid 1px;
      @include theme(border-top-color, primary);
      min-width: getTextFieldSizes(input-corner-min-width);
      height: calc(getTextFieldSizes(input-label-offset) + 0.2rem);
      pointer-events: none;
      box-shadow: inset 0 1px transparent;
      transition: border-color $transition-duration, box-shadow $transition-duration;
    }

    &::before {
      margin-right: getTextFieldSizes(input-corner-offset);
      border-left: solid 0.1rem transparent;
      border-radius: getTextFieldSizes(input-border-radius) 0;
    }

    &::after {
      flex-grow: 1;
      margin-left: getTextFieldSizes(input-corner-offset);
      border-right: solid 0.1rem transparent;
      border-radius: 0 getTextFieldSizes(input-border-radius);
    }
  }

  .TextInputLabelText {
    min-height: 3.8rem;
    padding-right: getTextFieldSizes(input-label-icon-offset);
    @include dots-after-text;
  }

  // Icons

  .StartIcon,
  .EndIcon {
    position: absolute;
    top: getTextFieldSizes(icon-margin);
    width: getTextFieldSizes(input-icon-size);
    height: getTextFieldSizes(input-icon-size);
    @include theme(color, default-input-color);
    @include center-flex;
  }

  .StartIcon {
    left: getTextFieldSizes(icon-margin-left);
  }

  .EndIcon {
    right: getTextFieldSizes(icon-margin-right);
  }

  .TextInputContainer {
    min-height: getTextFieldSizes(input-container);
    &--full-width .TextInputWrapper {
      max-width: initial;
    }

    &--focused,
    &--filled {
      .EndIcon,
      .StartIcon {
        @include theme(color, primary);
      }

      .TextInputLabelText {
        padding-right: 0;
      }
    }

    &--disabled {
      opacity: getTextFieldSizes(disabled-opacity);
    }

    &--withRightIcon {
      .TextInputBaseInput {
        padding-right: getTextFieldSizes(input-type-offset--with-icons);
      }
    }

    &--withLeftIcon {
      .TextInputBaseInput {
        padding-left: getTextFieldSizes(input-type-offset--with-icons);
      }

      .TextInputLabelContainer {
        text-indent: getTextFieldSizes(input-label-offset--with-icons);
      }

      .TextInputBaseInput {
        &:focus,
        &--filled {
          + .TextInputLabelContainer {
            text-indent: 0;
          }
        }
      }
    }
  }

  // Color mapping

  .TextInputContainer {
    @each $color in $base-colors {
      &--#{$color} {
        &--focused,
        &--filled {
          .EndIcon,
          .StartIcon {
            @include theme(color, #{$color});
          }
        }

        .Explanation {
          @include theme(color, #{$color});
        }

        .StartIcon,
        .EndIcon {
          @include theme(color, #{$color});
        }

        .TextInputLabelContainer {
          @include theme(border-color, #{$color});
          @include theme(color, #{$color});

          &::before,
          &::after {
            @include theme(border-top-color, #{$color});
          }
        }

        .TextInputBaseInput {
          @include theme(color, #{$color});

          @include theme(border, #{$color}, solid 0.1rem);

          &:not(:focus) {
            @include theme(border-top-color, #{$color});
          }

          &:focus,
          &--filled {
            @include theme(border-color, #{$color});
          }

          &:focus {
            @include theme(border-color, #{$color});

            + .TextInputLabelContainer {
              @include theme(color, #{$color});

              &::before,
              &::after {
                @include theme(border-top-color, #{$color});
              }
            }
          }
        }
      }
    }
  }
}
