// This mixin used for generation css with theme
@mixin theme($property, $key, $inlineExtra: null, $postExtra: null, $opacity: null, $useRgb: false) {
  @each $theme in $themes {
    @if (themeExists($key, $theme)) {
      $value: null;

      @if ($opacity) {
        @if ($useRgb == true) {
          $value: rgba-to-rgb(rgba(getThemeValue($key, $theme), $opacity));
        } @else {
          $value: rgba(getThemeValue($key, $theme), $opacity);
        }

        :root {
          --theme-#{$theme}-#{$key}--#{$opacity * 10}: $value;
        }
      } @else {
        $value: getThemeValue($key, $theme);
      }

      @if ($theme == 'default') {
        :global(body) & {
          #{$property}: #{$inlineExtra} #{$value} #{$postExtra};

          @if ($opacity) {
            #{$property}: #{$inlineExtra} var(--theme-#{$theme}-#{$key}--#{$opacity * 10}, #{$value}) #{$postExtra};
          } @else {
            #{$property}: #{$inlineExtra} var(--theme-#{$theme}-#{$key}, #{$value}) #{$postExtra};
          }
        }
      } @else {
        :global(.theme-#{$theme}) &,
        &:global(.theme-#{$theme}) {
          #{$property}: #{$inlineExtra} #{$value} #{$postExtra};

          @if ($opacity) {
            #{$property}: #{$inlineExtra} var(--theme-#{$theme}-#{$key}--#{$opacity * 10}, #{$value}) #{$postExtra};
          } @else {
            #{$property}: #{$inlineExtra} var(--theme-#{$theme}-#{$key}, #{$value}) #{$postExtra};
          }
        }
      }
    } @else {
      @error "Property #{$key} doesn't exist in #{$theme}";
    }
  }
}

// This mixin used for generation sass variables theme mapping for future using
@mixin generateThemeMappings($themeName, $newThemeMap) {
  $themes: append($themes, $themeName, $separator: comma) !global;

  @each $key, $value in $newThemeMap {
    @if not map-has-key($themeValues, $key) {
      $themeValues: map-merge(
        $themeValues,
        (
          $key: (
            $themeName: $value
          )
        )
      ) !global;
    } @else {
      $existingKeyMap: map-get($themeValues, $key);

      @if not map-get($existingKeyMap, $themeName) {
        $newKeyMap: map-merge(
          $existingKeyMap,
          (
            $themeName: $value
          )
        );
        $themeValues: map-merge(
          $themeValues,
          (
            $key: $newKeyMap
          )
        ) !global;
      }
    }
  }
}

// This mixin used for generation css variables
@mixin generateThemeVariables {
  :root {
    @each $key, $val in $themeValues {
      @each $theme in $themes {
        @if (themeExists($key, $theme)) {
          --theme-#{$theme}-#{$key}: #{getThemeValue($key, $theme)};
        }
      }
    }
  }
}
