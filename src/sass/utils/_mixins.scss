@import './functions';

// This mixin used for generation css with theme
@mixin theme($property, $key, $inlineExtra: null, $postExtra: null) {
  @each $theme in $themes {
    @if (themeExists($key, $theme)) {
      $value: getThemeValue($key, $theme);

      @if ($theme == 'default') {
        :global(body) & {
          #{$property}: #{$inlineExtra} #{$value} #{$postExtra};

          #{$property}: #{$inlineExtra} var(--theme-#{$theme}-#{$key}, #{$value}) #{$postExtra};
        }
      } @else {
        :global(.theme-#{$theme}) &,
        &:global(.theme-#{$theme}) {
          #{$property}: #{$inlineExtra} #{$value} #{$postExtra};

          #{$property}: #{$inlineExtra} var(--theme-#{$theme}-#{$key}, #{$value}) #{$postExtra};
        }
      }
    } @else {
      @error "Property #{$key} doesn't exist in #{$theme}";
    }
  }
}

// This mixin used for generation sass variables theme mapping for future using
@mixin generateThemeMappings($themeName, $newThemeMap) {
  $themes: append($themes, $themeName, $separator: comma) !global;

  @each $key, $value in $newThemeMap {
    @if not map-has-key($themeValues, $key) {
      $themeValues: map-merge(
        $themeValues,
        (
          $key: (
            $themeName: $value
          )
        )
      ) !global;
    } @else {
      $existingKeyMap: map-get($themeValues, $key);

      @if not map-get($existingKeyMap, $themeName) {
        $newKeyMap: map-merge(
          $existingKeyMap,
          (
            $themeName: $value
          )
        );
        $themeValues: map-merge(
          $themeValues,
          (
            $key: $newKeyMap
          )
        ) !global;
      }
    }
  }
}

// This mixin used for generation css variables
@mixin generateThemeVariables {
  @each $key, $val in $themeValues {
    @each $theme in $themes {
      @if (themeExists($key, $theme)) {
        :root {
          --theme-#{$theme}-#{$key}: #{getThemeValue($key, $theme)};
        }
      }
    }
  }
}

// This mixins is used for generating box-shadow like border for preventing size changing

@mixin generateBorderWithBoxShadow($color-variable, $size: 0.1rem) {
  @include theme(box-shadow, $color-variable, 0px 0px 0px $size);
}

// --- Components ---

// This mixin is used for merging typography font-size and line-height

@mixin getTypographyStyles($typography-name) {
  font-size: typography-sizes('#{$typography-name}-size');
  line-height: typography-sizes('#{$typography-name}-line-height');
}

// This mixins is used for generating button styles(including ghost state)

@mixin getButtonStyles($color-name) {
  @include theme(background-color, button-bg--#{$color-name});
  @include theme(color, button-color--#{$color-name});

  &:hover {
    @include theme(background-color, button-hover-bg--#{$color-name});
  }

  &:active {
    @include theme(background-color, button-active-bg--#{$color-name});
  }

  &:disabled {
    opacity: 0.4;
  }
}

@mixin getButtonGhostStyles($color-name) {
  @include theme(background-color, button-ghost-bg);

  @include theme(color, button-bg--#{$color-name});

  @include theme(border, button-bg--#{$color-name}, 1px solid);

  &:hover,
  &:focus {
    @include theme(background-color, button-ghost-hover--#{$color-name});
  }

  &:active {
    @include theme(background-color, button-ghost-bg);
  }

  &:disabled {
    opacity: 0.4;
  }
}
